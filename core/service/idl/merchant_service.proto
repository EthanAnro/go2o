syntax = "proto3";

import "global.proto";
import "message/merchant_dto.proto";
import "message/order_dto.proto";

option go_package = "./;proto";
option java_package = "com.github.go2o.rpc";

//商家服务
service MerchantService {
    // 获取商家的信息,mchId
    rpc GetMerchant (Int64) returns (QMerchant) {
    }
    // 注册商户并开店
    rpc CreateMerchant (CreateMerchantRequest) returns (MerchantCreateResponse) {
    }
    // 保存商户
    rpc SaveMerchant (SaveMerchantRequest) returns (Result) {
    }
    // 保存商户认证信息
    rpc SaveAuthenticate (SaveAuthenticateRequest) returns (Result) {
    }
    // 审核商户申请信息
    rpc ReviewAuthenticate (MerchantReviewRequest) returns (Result) {
    }
    // 验证用户密码,并返回编号。可传入商户或会员的账号密码
    rpc CheckLogin (MchUserPwdRequest) returns (MchLoginResponse) {
    }
    // 验证商户状态,mchId
    rpc Stat (Int64) returns (Result) {
    }
    // 同步批发商品,mchId
    rpc SyncWholesaleItem (Int64) returns (SyncWSItemsResponse) {
    }
    // 获取所有的交易设置,mchId
    rpc GetAllTradeConf_ (Int64) returns (STradeConfListResponse) {
    }
    // 根据交易类型获取交易设置
    rpc GetTradeConf (TradeConfRequest) returns (STradeConf_) {
    }
    // 保存交易设置
    rpc SaveTradeConf (TradeConfSaveRequest) returns (Result) {
    }
    // 根据会员号获取商户编号
    rpc GetMerchantIdByMember (MemberId) returns (Int64) {
    }
    /** 更换会员绑定 */
    rpc ChangeMemberBind(ChangeMemberBindRequest)returns(Result){
    }
  
    rpc GetAccount (MerchantId) returns (SMerchantAccount) {
    }
    // 设置商户启用或停用
    rpc SetEnabled (MerchantDisableRequest) returns (Result) {
    }
    // 根据主机查询商户编号
    rpc GetMerchantIdByHost (String) returns (Int64) {
    }
    // 获取商户的域名
    rpc GetMerchantMajorHost (MerchantId) returns (String) {
    }
    rpc SaveSaleConf (SaveMerchantSaleConfRequest) returns (Result) {
    }
    rpc GetSaleConf (MerchantId) returns (SMerchantSaleConf) {
    }

    rpc GetShopId (MerchantId) returns (Int64) {
    }
    // 修改密码
    rpc ChangePassword (ModifyMerchantPasswordRequest) returns (Result) {
    }

    // 保存API信息
    //rpc SaveApiInfo(mchId int64, d *merchant.ApiInfo) error
    // 获取API接口
    rpc GetApiInfo (MerchantId) returns (SMerchantApiInfo) {
    }
    // 启用/停用接口权限
    rpc ToggleApiPerm (MerchantApiPermRequest) returns (Result) {
    }
    // 根据API ID获取MerchantId
    rpc GetMerchantIdByApiId (String) returns (Int64) {
    }
    // 查询分页订单
    rpc PagedNormalOrderOfVendor (MerchantOrderRequest) returns (PagingMerchantOrderListResponse) {
    }
    // 查询分页订单
    rpc PagedWholesaleOrderOfVendor (MerchantOrderRequest) returns (PagingMerchantOrderListResponse) {
    }
    // 查询分页订单
    rpc PagedTradeOrderOfVendor (MerchantOrderRequest) returns (PagingMerchantOrderListResponse) {
    }
    // 提到会员账户
    rpc WithdrawToMemberAccount (WithdrawToMemberAccountRequest) returns (Result) {
    }
    // 账户充值
    rpc ChargeAccount (MerchantChargeRequest) returns (Result) {
    }

    rpc GetMchBuyerGroup_ (MerchantBuyerGroupId) returns (SMerchantBuyerGroup) {
    }
    // 保存
    rpc SaveMchBuyerGroup (SaveMerchantBuyerGroupRequest) returns (Result) {
    }
    // 获取买家分组
    rpc GetBuyerGroups (MerchantId) returns (MerchantBuyerGroupListResponse) {
    }
    // 获取批发返点率
    rpc GetRebateRate (MerchantBuyerGroupId) returns (WholesaleRebateRateListResponse) {
    }
    // 保存分组返点率
    rpc SaveGroupRebateRate (SaveWholesaleRebateRateRequest) returns (Result) {
    }
}


message MerchantOrderRequest {
    // 商户编号
    int64 merchantId = 1;
    // 是否分页
    bool pagination = 2;
    // 分页参数
    SPagingParams params = 3;
}


message PagingMerchantOrderListResponse {
    int64 total = 1;
    repeated SMerchantOrder data = 2;
}

message SMerchantOrder {
    int64 orderId = 1;
    string orderNo = 2;
    string parentNo = 3;
    int64 buyerId = 4;
    string buyerName = 5;
    // 订单详情,主要描述订单的内容
    string details = 6;
    double itemAmount = 7;
    double discountAmount = 8;
    double expressFee = 9;
    double packageFee = 10;
    bool isPaid = 11;
    double finalAmount = 12;
    int32 state = 13;
    string statusText = 14;
    int64 createTime = 15;
    repeated SOrderItem items = 16;
    map<string, string> data = 17;
}
