//*
// This file is auto generated by tto v0.5.8 !
// If you want to modify this code, please read the guide
// to modify code template.
//
// Get started: https://github.com/ixre/tto
//
// Copyright (C) 2009-2024 56X.NET, All rights reserved.
//
// name : invoice_tenant_service.proto
// author : jarrysix
// date : 2024/06/24 15:22:54
// description :
// history :

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: invoice_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InvoiceService_SaveTenant_FullMethodName      = "/InvoiceService/SaveTenant"
	InvoiceService_GetTenant_FullMethodName       = "/InvoiceService/GetTenant"
	InvoiceService_QueryTenantList_FullMethodName = "/InvoiceService/QueryTenantList"
	InvoiceService_DeleteTenant_FullMethodName    = "/InvoiceService/DeleteTenant"
	InvoiceService_PagingTenant_FullMethodName    = "/InvoiceService/PagingTenant"
)

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceServiceClient interface {
	// 保存发票租户
	SaveTenant(ctx context.Context, in *SaveTenantRequest, opts ...grpc.CallOption) (*SaveTenantResponse, error)
	// 获取发票租户
	GetTenant(ctx context.Context, in *InvoiceTenantId, opts ...grpc.CallOption) (*STenant, error)
	// 获取发票租户列表
	QueryTenantList(ctx context.Context, in *QueryTenantRequest, opts ...grpc.CallOption) (*QueryTenantResponse, error)
	// 删除发票租户
	DeleteTenant(ctx context.Context, in *InvoiceTenantId, opts ...grpc.CallOption) (*Result, error)
	// 获取发票租户分页数据
	PagingTenant(ctx context.Context, in *TenantPagingRequest, opts ...grpc.CallOption) (*TenantPagingResponse, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) SaveTenant(ctx context.Context, in *SaveTenantRequest, opts ...grpc.CallOption) (*SaveTenantResponse, error) {
	out := new(SaveTenantResponse)
	err := c.cc.Invoke(ctx, InvoiceService_SaveTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetTenant(ctx context.Context, in *InvoiceTenantId, opts ...grpc.CallOption) (*STenant, error) {
	out := new(STenant)
	err := c.cc.Invoke(ctx, InvoiceService_GetTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) QueryTenantList(ctx context.Context, in *QueryTenantRequest, opts ...grpc.CallOption) (*QueryTenantResponse, error) {
	out := new(QueryTenantResponse)
	err := c.cc.Invoke(ctx, InvoiceService_QueryTenantList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) DeleteTenant(ctx context.Context, in *InvoiceTenantId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, InvoiceService_DeleteTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) PagingTenant(ctx context.Context, in *TenantPagingRequest, opts ...grpc.CallOption) (*TenantPagingResponse, error) {
	out := new(TenantPagingResponse)
	err := c.cc.Invoke(ctx, InvoiceService_PagingTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
// All implementations must embed UnimplementedInvoiceServiceServer
// for forward compatibility
type InvoiceServiceServer interface {
	// 保存发票租户
	SaveTenant(context.Context, *SaveTenantRequest) (*SaveTenantResponse, error)
	// 获取发票租户
	GetTenant(context.Context, *InvoiceTenantId) (*STenant, error)
	// 获取发票租户列表
	QueryTenantList(context.Context, *QueryTenantRequest) (*QueryTenantResponse, error)
	// 删除发票租户
	DeleteTenant(context.Context, *InvoiceTenantId) (*Result, error)
	// 获取发票租户分页数据
	PagingTenant(context.Context, *TenantPagingRequest) (*TenantPagingResponse, error)
	mustEmbedUnimplementedInvoiceServiceServer()
}

// UnimplementedInvoiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvoiceServiceServer struct {
}

func (UnimplementedInvoiceServiceServer) SaveTenant(context.Context, *SaveTenantRequest) (*SaveTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTenant not implemented")
}
func (UnimplementedInvoiceServiceServer) GetTenant(context.Context, *InvoiceTenantId) (*STenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedInvoiceServiceServer) QueryTenantList(context.Context, *QueryTenantRequest) (*QueryTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTenantList not implemented")
}
func (UnimplementedInvoiceServiceServer) DeleteTenant(context.Context, *InvoiceTenantId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedInvoiceServiceServer) PagingTenant(context.Context, *TenantPagingRequest) (*TenantPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingTenant not implemented")
}
func (UnimplementedInvoiceServiceServer) mustEmbedUnimplementedInvoiceServiceServer() {}

// UnsafeInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceServiceServer will
// result in compilation errors.
type UnsafeInvoiceServiceServer interface {
	mustEmbedUnimplementedInvoiceServiceServer()
}

func RegisterInvoiceServiceServer(s grpc.ServiceRegistrar, srv InvoiceServiceServer) {
	s.RegisterService(&InvoiceService_ServiceDesc, srv)
}

func _InvoiceService_SaveTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).SaveTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_SaveTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).SaveTenant(ctx, req.(*SaveTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceTenantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetTenant(ctx, req.(*InvoiceTenantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_QueryTenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).QueryTenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_QueryTenantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).QueryTenantList(ctx, req.(*QueryTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceTenantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).DeleteTenant(ctx, req.(*InvoiceTenantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_PagingTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).PagingTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_PagingTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).PagingTenant(ctx, req.(*TenantPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceService_ServiceDesc is the grpc.ServiceDesc for InvoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTenant",
			Handler:    _InvoiceService_SaveTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _InvoiceService_GetTenant_Handler,
		},
		{
			MethodName: "QueryTenantList",
			Handler:    _InvoiceService_QueryTenantList_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _InvoiceService_DeleteTenant_Handler,
		},
		{
			MethodName: "PagingTenant",
			Handler:    _InvoiceService_PagingTenant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoice_service.proto",
}
